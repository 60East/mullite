#!/usr/bin/env python

import urllib2, base64, random, sys, imp, pprint as pp
import xml.etree.ElementTree as ET
from datetime import datetime
import xml.dom.minidom


cfg = imp.load_source("mullite", "mullite.conf")
reverse_users = {}
for k, v in cfg.users.items():
   reverse_users[v] = v
cfg.users.update(reverse_users)
base64string = base64.encodestring('%s:%s' % (cfg.script_user,cfg.script_pass)).replace('\n', '')


commit_file = "mullite.progress"
commit_lines = set()
try:
   with open(commit_file, 'r') as f:
      commit_lines = set(f.read().lstrip().split("\n"))
except IOError:
   pass

def has_been_processed(change_id):
   return change_id in commit_lines

def mark_as_processed(change_id):
   if (has_been_processed(change_id)):
      return
   commit_lines.add(change_id)
   with open(commit_file, "a") as f:
       f.write("\n%s" % (change_id))



def get_xml(url):
   log("getting xml from: %s" % (url))
   request = urllib2.Request(url)
   request.add_header("Authorization", "Basic %s" % base64string)
   result = urllib2.urlopen(request)
   return ET.fromstring(result.read())


def post_xml(url, message):
   log("posting xml to: %s" % (url))
   log("message:\n%s" % (message))
   request = urllib2.Request(url=url, data=message)
   request.add_header("Authorization", "Basic %s" % base64string)
   request.add_header("Accept", "application/xml")
   request.add_header("Content-Type", "application/xml")
   result = urllib2.urlopen(request).read()
   log("result:\n%s" % (xml.dom.minidom.parseString(result).toprettyxml(indent="   ")))
   return result


def log(str, level = "INFO"):
   print "%s [%s] - %s" % (datetime.now().strftime("%m-%d-%Y %H:%M:%S"), level, str)


def get_change_ids(repository, limit=10):
   return [ ele.text for ele in get_xml("%s-fe/revisionData-v1/changesetList/%s?maxReturn=%s" % (cfg.server_base, repository, limit)) ]


def get_change(repo, change_id):
   xml = get_xml("%s-fe/revisionData-v1/changeset/%s/%s" % (cfg.server_base, repo, change_id))
   change = {
      "author" : xml.attrib["author"].split(" <")[0],
      "branch" : xml.attrib["branch"],
      "comment" : xml.find("comment").text.rstrip(),
      "date" : xml.attrib["date"],
      "email" : xml.attrib["author"].split(" <")[1].split(">")[0],
      "files" : [],
      "id" : change_id,
      "repo" : repo,
   }
   for file in xml.findall('fileRevisionKey'):
      change["files"].append(file.attrib["path"])
   return change


def extract_tag_from_comment(change, tag):
   tag = tag + " "
   if change["comment"].find(tag) == -1: return None
   try:
      v = change["comment"]
      v = v[change["comment"].find(tag) + len(tag):].lstrip()
      if v.find(" ") != -1: v = v[:v.find(" ")]
      return v if len(v) > 0 else None
   except:
      return None


def find_reviewers(change):
   reviewers = extract_tag_from_comment(change, "#reviewers")
   if reviewers == None:
      reviewers = extract_tag_from_comment(change, "#reviewer")
   if reviewers != None:
      return reviewers.split(",")
   if change["repo"] not in cfg.repos:
      log("we don't create reviews for the %s repo" % (change["repo"]))
      return None
   author = cfg.users[change["author"]]
   reviewer = random.choice(cfg.repos[change["repo"]])
   while reviewer == author:
      reviewer = random.choice(cfg.repos[change["repo"]])
   log("chose %s to review %s's change in %s" % (reviewer, author, change["repo"]))
   return [ reviewer ]


def create_review(change):
   log("create_review(change %s)" % (change["id"]))
   try:
      reviewers = find_reviewers(change)
      author = change["author"]
      if reviewers == None:
         log("no reviewer found for %s's change, skipping review creation for %s" % (author, change["id"]))
         return
      reviewers_str = "".join(["""<reviewer><userName>%s</userName></reviewer>""" % (s) for s in reviewers])
      message = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<createReview>
   <detailedReviewData>
      <allowReviewersToJoin>true</allowReviewersToJoin>
      <author>
         <userName>%s</userName>
      </author>
      <creator>
         <userName>%s</userName>
      </creator>
      <description>%s</description>
      <jiraIssueKey/>
      <name>%s</name>
      <projectKey>%s</projectKey>
      <state>Review</state>
      <type>REVIEW</type>
      <reviewers>
         %s
      </reviewers>
   </detailedReviewData>
   <changesets>
      <changesetData>
         <id>%s</id>
      </changesetData>
      <repository>%s</repository>
   </changesets>
</createReview>""" % (cfg.users[author], cfg.script_user, change["comment"], change["comment"], change["repo"], reviewers_str, change["id"], change["repo"])
      url = "%s/reviews-v1" % (cfg.server_base)
      print message
      result = ET.fromstring(post_xml(url, message))
      review_id = result.find("permaId").find("id").text
      log("new review id: %s" % (review_id))
      change["review"] = review_id
      return True
   except:
      log("failed to create review for change %s: %s" % (change["id"], sys.exc_info()[0]))
      return False


def append_to_review(change):
   review_id = extract_tag_from_comment(change, "#review")
   if review_id == None: return False
   try:
      message = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<addChangeset>
    <repository>%s</repository>
    <changesets>
        <changesetData>
            <id>%s</id>
        </changesetData>
    </changesets>
</addChangeset>""" % (change["repo"], change["id"])
      url = "%s/reviews-v1/%s/addChangeset" % (cfg.server_base, review_id)
      result = ET.fromstring(post_xml(url, message))
      change["review"] = review_id
      return True
   except Exception as e:
      log("failed to attach change %s to review %s: %s" % (change["id"], review_id, sys.exc_info()[0]))
      return False


def main():
   for repo, users in cfg.repos.items():
      for change_id in get_change_ids(repo, cfg.history_window):
         if has_been_processed(change_id):
            continue
         change = get_change(repo, change_id)
         if change["comment"].find("#noreview") > -1:
            log("tagged as #noreview, skipping review creation: %s" % (change["id"]))
         elif len(change["files"]) == 0:
            log("no files, skipping review creation: %s" % (change["id"]))
         elif append_to_review(change):
            log("appended to review %s: %s" % (change["review"], change["id"]))
         elif create_review(change):
            log("created review %s: %s" % (change["review"], change["id"]))
         else:
            log("failed to process change %s" % (change["id"]), "WARN")
         mark_as_processed(change_id)

if __name__ == "__main__":
    main()


